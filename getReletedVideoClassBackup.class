package com.example.fastmedia;

import android.os.AsyncTask;
import android.util.Log;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static androidx.constraintlayout.motion.utils.Oscillator.TAG;

public class getRelatedVideoData extends AsyncTask<String, Integer, String> {
    private static JSONObject jsonObjectt;
    private static boolean isThereId;
    private static boolean isThereDate;
    private static boolean isThereTime;
    private static int index = 2;
    private static boolean badge;
    private Pattern scriptPattern;
    private Matcher scriptMatcher;
    private Document doc = null;
    private String result;
    private boolean match = false;

    private ArrayList<String>videoId = new ArrayList<>();
    private ArrayList<String>thumbnailUrl = new ArrayList<>();
    private ArrayList<String>videoTitle = new ArrayList<>();
    private ArrayList<String>viewsInfo = new ArrayList<>();
    private ArrayList<String>showTime = new ArrayList<>();
    private ArrayList<String>dateInfo = new ArrayList<>();
    private ArrayList<String>channelName = new ArrayList<>();
    private ArrayList<String>channelImgUrl = new ArrayList<>();
    private ArrayList<Integer>heartIcon = new ArrayList<>();
    private ArrayList<Integer>DownloadIcon = new ArrayList<>();
    private ArrayList<Integer>badgeIcon = new ArrayList<>();
    private ArrayList<Boolean>isLive = new ArrayList<>();

    //arrayList getters ----------------------------------------------


    public ArrayList<Boolean> getIsLive() {
        return isLive;
    }

    public ArrayList<String> getVideoId() {
        return videoId;
    }

    public ArrayList<String> getThumbnailUrl() {
        return thumbnailUrl;
    }

    public ArrayList<String> getVideoTitle() {
        return videoTitle;
    }

    public ArrayList<String> getViewsInfo() {
        return viewsInfo;
    }

    public ArrayList<String> getShowTime() {
        return showTime;
    }

    public ArrayList<String> getDateInfo() {
        return dateInfo;
    }

    public ArrayList<String> getChannelName() {
        return channelName;
    }

    public ArrayList<String> getChannelImgUrl() {
        return channelImgUrl;
    }

    public ArrayList<Integer> getHeartIcon() {
        return heartIcon;
    }

    public ArrayList<Integer> getDownloadIcon() {
        return DownloadIcon;
    }

    public ArrayList<Integer> getBadgeIcon() {
        return badgeIcon;
    }

    public void myData(){

//
//        //Jsoup Part -----------------------------------------------------------
//        Document doc = null;
//        try {
//            doc = Jsoup.connect("https://www.youtube.com/watch?v=pAQTUZz0T_0").get();
//        } catch (IOException e) {
//            System.out.println("error in: url part");
//            e.printStackTrace();
//        }
//        doc.html();
//
//        //REGX Part --------------------------------------------------------
//        String scriptStringPattern = "window\\[\"ytInitialData\"\\](.*?)\"}};";
//        Pattern scriptPattern = Pattern.compile(scriptStringPattern);
//        Matcher scriptMatcher = scriptPattern.matcher(doc.html());
//
//        scriptMatcher.find();
//        String result = scriptMatcher.group(0);
//        result= result.replace("window[\"ytInitialData\"] = ","");
//        result= result.replace(";","");
////        System.out.println("-------------------------");
////        System.out.println(result);
////        System.out.println("-------------------------");
//
//
//        //convert JSON string to JSON Object
//        JSONParser parser = new JSONParser();
//        JSONObject json = null;
//        try {
//            json = (JSONObject) parser.parse(result);
//        } catch (ParseException e) {
//            System.out.println("error in: convert JSON string to JSON Object");
//            e.printStackTrace();
//        }
////
////read JSON from a file-----------------------------------------
////        JSONParser parser = new JSONParser();
////        Object obj = parser.parse(new FileReader("a.json"));
////        JSONObject jsonObject = (JSONObject) obj;
////--------------------------------------------------------------
//
//
//        //get data fom JSON
//        //First path to go inside videos content data------------------------------------------
//        JSONObject contents = (JSONObject) json.get("contents");
//        JSONObject twoColumnWatchNextResults = (JSONObject) contents.get("twoColumnWatchNextResults");
//        JSONObject secondaryResults = (JSONObject) twoColumnWatchNextResults.get("secondaryResults");
//        JSONObject secondaryResults2 = (JSONObject)secondaryResults.get("secondaryResults");
//        JSONArray resultsArray = (JSONArray) secondaryResults2.get("results");
//
//        //this part for checking if the videos data start with 1 or 2 in JSON data array
//        //and this test is for use the right index in nex loop to start extract the data
//        JSONObject AgetCompactAutoplayRenderer = (JSONObject) resultsArray.get(1);
//        JSONObject AcompactAutoplayRenderer = (JSONObject)AgetCompactAutoplayRenderer.get("compactVideoRenderer");
//
//        //this check gives a idea to for loop from which index should start!
//        if(AcompactAutoplayRenderer == null){
//            index = 2;
//        }else {
//            index = 1;
//        }
//
//        //result array contain all data that I need videos titles, videos time, etc...
//        //I Loop inside result array to get each video's data
//        for(int indexx=2; index < resultsArray.size(); index++){
//
//            JSONObject getCompactAutoplayRenderer = (JSONObject) resultsArray.get(index);
//            JSONObject compactAutoplayRenderer = (JSONObject)getCompactAutoplayRenderer.get("compactVideoRenderer");
//            //compactRadioRenderer
//            //compactVideoRenderer
//
//            try{
//                //video id
//                System.out.println(compactAutoplayRenderer.get("videoId"));
//                isThereId = true;
//            }catch (Exception exception){
//                System.out.println("error: video id doesn't found!");
//                isThereId = false;
//            }
//            if(isThereId == true) {
//                try {
//                    //video title
//                    JSONObject title = (JSONObject) compactAutoplayRenderer.get("title");
//                    System.out.println(title.get("simpleText"));
//                } catch (Exception exception) {
//                    System.out.println("error: video title doesn't found!");
//                }
//
//                try {
//                    //channel name
//                    JSONObject longBylineText = (JSONObject) compactAutoplayRenderer.get("longBylineText");
//                    JSONArray getRunsArray = (JSONArray) longBylineText.get("runs");
//                    JSONObject getText = (JSONObject) getRunsArray.get(0);
//                    System.out.println(getText.get("text"));
//                } catch (Exception exception) {
//                    System.out.println("error: channel name doesn't found!");
//                }
//
//                try {
//                    //badge
//                    //System.out.println("badge: " + compactAutoplayRenderer.get("ownerBadges"));
//                    if(compactAutoplayRenderer.get("ownerBadges") != null){
//                        System.out.println("badge: âœ”");
//                    }else {
//                        System.out.println("badge: no");
//                    }
//                }catch (Exception e){
//                    //System.out.println("is not official account");
//                }
//
//                try {
//                    //video date
//                    JSONObject publishedTimeText = (JSONObject) compactAutoplayRenderer.get("publishedTimeText");
//                    System.out.println(publishedTimeText.get("simpleText"));
//                    isThereDate = true;
//                } catch (Exception exception) {
//                    //System.out.println("error: video date found!");
//                    isThereDate = false;
//                }
//
//                try {
//                    //video time
//                    JSONObject lengthText = (JSONObject) compactAutoplayRenderer.get("lengthText");
//                    System.out.println(lengthText.get("simpleText"));
//                    isThereTime = true;
//                } catch (Exception exception) {
//                    //System.out.println("error: video time doesn't found!");
//                    isThereTime = false;
//                }
//
//                //this check helps to know if this video is a live video or not
//                if(isThereDate == true && isThereTime == true) {
//                    try {
//                        //video views
//                        JSONObject viewCountText = (JSONObject) compactAutoplayRenderer.get("shortViewCountText");
//                        System.out.println(viewCountText.get("simpleText"));
//                    } catch (Exception exception) {
//                        System.out.println("error: Views doesn't found!");
//                    }
//                }else {
//                    System.out.println("is live now");
//                }
//
//                try {
//                    //channel thumbnail
//                    JSONObject channelThumbnail = (JSONObject) compactAutoplayRenderer.get("channelThumbnail");
//                    JSONArray thumbnails = (JSONArray) channelThumbnail.get("thumbnails");
//                    JSONObject getChannelPicUrl = (JSONObject) thumbnails.get(0);
//                    System.out.println(getChannelPicUrl.get("url"));
//                } catch (Exception exception) {
//                    System.out.println("error: channel thumbnail doesn't found!");
//                }
//
//                try {
//                    //video thumbnail
//                    JSONObject thumbnail = (JSONObject) compactAutoplayRenderer.get("thumbnail");
//                    JSONArray getThumbnails = (JSONArray) thumbnail.get("thumbnails");
//                    JSONObject getVideoPicUrl = (JSONObject) getThumbnails.get(0);
//                    System.out.println(getVideoPicUrl.get("url"));
//                } catch (Exception exception) {
//                    System.out.println("error: video thumbnail doesn't found!");
//                }
//            }
//
//            System.out.println("--------------------------------------------------------");
//        }

    }

    @Override
    protected String doInBackground(String... strings) {

        //Jsoup Part -----------------------------------------------------------
        try {
            System.out.println("delevred Url: "+strings[0]);
            doc = Jsoup.connect(strings[0]).get();
            //https://www.youtube.com/watch?v=pAQTUZz0T_0
        } catch (IOException e) {
            System.out.println("error in: url part");
            e.printStackTrace();
        }
        doc.html();

        //REGX Part --------------------------------------------------------
        regex();

        //scriptMatcher.find();
        if(scriptMatcher.find() == true) {
            result = scriptMatcher.group(0);
            result = result.replace("window[\"ytInitialData\"] = ", "");
            result = result.replace(";", "");
//        System.out.println("-------------------------");
//        System.out.println(result);
//        System.out.println("-------------------------");
        }else {
            System.out.println("No matches!!");
            while (match == false){
                    regex();
                    if(scriptMatcher.find() == true){
                        result = scriptMatcher.group(0);
                        result = result.replace("window[\"ytInitialData\"] = ", "");
                        result = result.replace(";", "");
                        match = true;
                    }
            }
            match = false;
        }

            //convert JSON string to JSON Object
            JSONParser parser = new JSONParser();
            JSONObject json = null;
            try {
                json = (JSONObject) parser.parse(result);
//                System.out.println("my flag");
//                System.out.println("-------------------------------------------------------------");
//                System.out.println("-------------------------------------------------------------");
//                System.out.println("-------------------------------------------------------------");
//                //System.out.println(result);
//                Log.e(TAG, result);
//                System.out.println("-------------------------------------------------------------");
//                System.out.println("-------------------------------------------------------------");
//                System.out.println("-------------------------------------------------------------");
            } catch (ParseException e) {
                System.out.println("error in: convert JSON string to JSON Object");
                e.printStackTrace();
            }

//
//read JSON from a file-----------------------------------------
//        JSONParser parser = new JSONParser();
//        Object obj = parser.parse(new FileReader("a.json"));
//        JSONObject jsonObject = (JSONObject) obj;
//--------------------------------------------------------------


        //get data fom JSON
        //First path to go inside videos content data------------------------------------------
        JSONObject contents = (JSONObject) json.get("contents");
        JSONObject twoColumnWatchNextResults = (JSONObject) contents.get("twoColumnWatchNextResults");
        JSONObject secondaryResults = (JSONObject) twoColumnWatchNextResults.get("secondaryResults");
        JSONObject secondaryResults2 = (JSONObject)secondaryResults.get("secondaryResults");
        JSONArray resultsArray = (JSONArray) secondaryResults2.get("results");

        //this part for checking if the videos data start with 1 or 2 in JSON data array
        //and this test is for use the right index in the next loop to start extract the data
        JSONObject AgetCompactAutoplayRenderer = (JSONObject) resultsArray.get(1);
        JSONObject AcompactAutoplayRenderer = (JSONObject)AgetCompactAutoplayRenderer.get("compactVideoRenderer");

        //this check gives an idea to for loop for which index should start!
        if(AcompactAutoplayRenderer == null){
            index = 2;
        }else {
            index = 1;
        }

        //result array contain all data that I need: videos titles, videos time, etc...
        //I Loop inside result array to get each video's data
        for(int indexx=2; index < resultsArray.size(); index++){

            JSONObject getCompactAutoplayRenderer = (JSONObject) resultsArray.get(index);
            JSONObject compactAutoplayRenderer = (JSONObject)getCompactAutoplayRenderer.get("compactVideoRenderer");
            //compactRadioRenderer
            //compactVideoRenderer

            try{
                //video id
                System.out.println(compactAutoplayRenderer.get("videoId"));
                videoId.add((String) compactAutoplayRenderer.get("videoId"));
                isThereId = true;
            }catch (Exception exception){
                System.out.println("error: video id doesn't found!");
                isThereId = false;
            }
            if(isThereId == true) {
                try {
                    //video title
                    JSONObject title = (JSONObject) compactAutoplayRenderer.get("title");
                    System.out.println(title.get("simpleText"));
                    videoTitle.add((String) title.get("simpleText"));
                } catch (Exception exception) {
                    System.out.println("error: video title doesn't found!");
                }

                try {
                    //channel name
                    JSONObject longBylineText = (JSONObject) compactAutoplayRenderer.get("longBylineText");
                    JSONArray getRunsArray = (JSONArray) longBylineText.get("runs");
                    JSONObject getText = (JSONObject) getRunsArray.get(0);
                    System.out.println(getText.get("text"));
                    channelName.add((String) getText.get("text"));
                } catch (Exception exception) {
                    System.out.println("error: channel name doesn't found!");
                }

                try {
                    //badge
                    //System.out.println("badge: " + compactAutoplayRenderer.get("ownerBadges"));
                    if(compactAutoplayRenderer.get("ownerBadges") != null){
                        System.out.println("badge: âœ”");
                        badgeIcon.add(R.drawable.ic_badge);
                    }else {
                        System.out.println("badge: no");
                        badgeIcon.add(0);
                    }
                }catch (Exception e){
                    //System.out.println("is not official account");
//                    System.out.println("badge: no");
//                    badgeIcon.add(0);
                }

                try {
                    //video date
                    JSONObject publishedTimeText = (JSONObject) compactAutoplayRenderer.get("publishedTimeText");
                    System.out.println(publishedTimeText.get("simpleText"));
                    dateInfo.add((String) publishedTimeText.get("simpleText"));
                    isThereDate = true;
                } catch (Exception exception) {
                    //System.out.println("error: video date found!");
                    dateInfo.add("");
                    isThereDate = false;
                }

                try {
                    //video time
                    JSONObject lengthText = (JSONObject) compactAutoplayRenderer.get("lengthText");
                    System.out.println(lengthText.get("simpleText"));
                    showTime.add((String) lengthText.get("simpleText"));
                    isThereTime = true;
                } catch (Exception exception) {
                    //System.out.println("error: video time doesn't found!");
                    showTime.add("");
                    isThereTime = false;
                }
                try {
                    //video views
                    JSONObject viewCountText = (JSONObject) compactAutoplayRenderer.get("shortViewCountText");
                    System.out.println(viewCountText.get("simpleText"));
                    viewsInfo.add((String) viewCountText.get("simpleText"));
                } catch (Exception exception) {
                    System.out.println("error: Views doesn't found!");
                    viewsInfo.add("");
                }
                //this check helps to know if this video is a live video or not
                if(isThereDate == true && isThereTime == true) {
                    isLive.add(false);
                }else {
                    System.out.println("is live now");
                    isLive.add(true);
                }

                try {
                    //channel thumbnail
                    JSONObject channelThumbnail = (JSONObject) compactAutoplayRenderer.get("channelThumbnail");
                    JSONArray thumbnails = (JSONArray) channelThumbnail.get("thumbnails");
                    JSONObject getChannelPicUrl = (JSONObject) thumbnails.get(0);
                    System.out.println(getChannelPicUrl.get("url"));
                    channelImgUrl.add((String) getChannelPicUrl.get("url"));
                } catch (Exception exception) {
                    System.out.println("error: channel thumbnail doesn't found!");
                    channelImgUrl.add("");
                }

                try {
                    //video thumbnail
                    JSONObject thumbnail = (JSONObject) compactAutoplayRenderer.get("thumbnail");
                    JSONArray getThumbnails = (JSONArray) thumbnail.get("thumbnails");
                    JSONObject getVideoPicUrl = (JSONObject) getThumbnails.get(0);
                    System.out.println(getVideoPicUrl.get("url"));
                    thumbnailUrl.add((String) getVideoPicUrl.get("url"));
                } catch (Exception exception) {
                    System.out.println("error: video thumbnail doesn't found!");
                    thumbnailUrl.add("");
                }

                //add icons
                heartIcon.add(R.drawable.ic_save_for_later);
                DownloadIcon.add(R.drawable.ic_download);
            }

            System.out.println("--------------------------------------------------------");
        }
        return null;
    }
    public void regex(){
        //in this REGX part I extract JSON data from youtube url source code and pass it into string
        String scriptStringPattern = "window\\[\"ytInitialData\"\\](.*?)\"\\}\\};";
        scriptPattern = Pattern.compile(scriptStringPattern);
        scriptMatcher = scriptPattern.matcher(doc.html());
    }
}
